I"E/<p>In prediction problems, we often fit one model, evaluate its performance, and test it on unseen data. But what if we could combine multiple models at once and leverage their combined performance? This is the spirit of “boosting”: creating an ensemble of learning algorithms, which perform better together than each does independently. Here, we’ll give a quick overview of boosting, and we’ll review one of the most influential boosting algorithms, AdaBoost.</p>

<h2 id="learning-theory-background">Learning theory background</h2>

<p>Consider a binary classification problem based on some data $\{(x_i, y_i)\}_{i=1}^n$ where $y_i \in \{0, 1\}$. Suppose you have a few decision rules that you can use to classify your data points, but each of the decision rules is not very accurate (e.g., each barely performs above random guessing). Boosting provides a systematic way to combine these “weak” classifiers into a “strong” classifier that performs much better.</p>

<p>To begin to understand the theory behind boosting, we should first define the difference between “strong learners” and “weak learners”. Intuitively, a strong learner is a learning algorithm that achieves close to perfect prediction. A weak learner is one that achieves prediction performance barely above random chance.</p>

<p>The formal definitions of strong and weak learners are as follows (as described in <a href="https://arxiv.org/abs/1909.05207">Prof. Elad Hazan’s book</a>):</p>

<blockquote>
  <p>A hypothesis class $\mathcal{H}$ is <strong>strongly learnable</strong> if the following holds. There exists an algorithm $\mathcal{A}$ that accepts $S_T = {(x_t, y_t), t \in [T]}$ and returns hypotheses $\mathcal{A}(S_T) \in \mathcal{H}$ that satisfies: for any $\epsilon, \delta &gt; 0$ there exists a sufficiently large natural number $T = T(\epsilon, \delta)$ such that for any distribution $\mathcal{D}$ over pairs $(x, y)$ and $T$ samples from this distribution, it holds with probability at least $1 - \delta$</p>
</blockquote>

\[\text{error}(\mathcal{A}(S_T)) \leq \epsilon.\]

<p>In words, a strong learner is one that achieves very small error. This is largely equivalent to the definition of <a href="https://www.wikiwand.com/en/Probably_approximately_correct_learning">PAC learnability</a>.</p>

<p>On the flip side, the formal definition of a weak learner is as follows.</p>

<blockquote>
  <p>A hypothesis class $\mathcal{H}$ is $\gamma$-<strong>weakly learnable</strong> if the following holds. There exists an algorithm $\mathcal{A}$ that accepts data $S_T = {(x_t, y_t), t \in [T]}$ and returns a hypothesis $\mathcal{A}(S_T) \in \mathcal{H}$ that satisfies: for any $\delta &gt; 0$ there exists a sufficiently large natural number $T = T(\delta, \gamma)$ such that for any distribution $\mathcal{D}$ over pairs $(x, y)$ and $T$ samples from this distribution, it holds with probability at least $1 - \delta$</p>

\[\text{error}(\mathcal{A}(S_T)) \leq \frac12 - \gamma.\]
</blockquote>

<h2 id="boosting">Boosting</h2>

<p>In the late 80s, there was an open theoretical question about whether weak and strong learners were actually distinct. If we could build a classifier for a problem just barely above random guessing (i.e., a weak learner exists), does that mean that we can classify arbitrarily well (i.e., a strong learner exists)? Or were there problems for which a weak learner exists, but not a strong learner? This is the concept of “boosting” as it was first described by Michael Kearns and Leslie Valiant: whether a slight advantage in performance could be “boosted” to make the algorithm arbitarily accurate.</p>

<p>In a 1990 <a href="https://link.springer.com/content/pdf/10.1007/BF00116037.pdf">seminal paper</a> in machine learning, Rob Schapire found a surprising conclusion: The existence of a weak learner implies the existence of a strong learner. In other words (since a strong learner trivially implies a weak learner),</p>

\[\text{Weak learnability} \iff \text{Strong learnability}.\]

<p>Schapire showed how to transform a set of weak learners into a unified algorithm that could perform arbitrarily well. This was a groundbreaking result because it implied that there is a generic, practical method for improving performance of any black-box algorithm.</p>

<p>Many variations of boosting have since been proposed, with the central difference between them being the way in which the base (weak) learners are combined. One of the most significant algorithms is called AdaBoost (developed by Schapire), which we now review.</p>

<h2 id="adaboost">AdaBoost</h2>

<p>AdaBoost is a particular instance of a boosting algorithm that finds an optimal weighting for each base learner. The basic premise of AdaBoost is this: given a set of classifiers $\{\delta_j\}_{j = 1}^m$ and data $\{(x_i, y_i)\}_{i=1}^n$, we iteratively refit each of the classifiers, where on each iteration we place more weight on examples that were misclassified in earlier iterations. By placing more weight on “difficult” examples, we can encourage the learners to focus more of their attention on these examples. Then, we can compute a weighting scheme for the learners themselves, and use these weights to output a final prediction.</p>

<p>A key attribute of AdaBoost is its exponential weight update schedule. In particular, we maintain a set of weights $\{w_i\}_{i=1}^n$ over the examples (we can think of this as a distribution over examples if we normalize it). On each iteration, if the learner incorrectly classifies example $x_i$, we update its weight as</p>

\[w_i^{(t+1)} = w_i^{(t)} e^{\alpha_t \mathbf{I}(\hat{y}_i \neq y_i)}\]

<p>where $\alpha_t = \frac{1 - \text{error}}{\text{error}}$ is the log-odds of the error of the current classifier. Notice that the weight only changes if the guess $\hat{y}_i$ is incorrect – otherwise, the weight remains unchanged. Furthermore, the weight increases more when the error is lower,</p>

<p>The full algorithm in Python is below. We show an example with the sklearn breast cancer dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_digits</span><span class="p">,</span> <span class="n">load_breast_cancer</span>
<span class="kn">from</span> <span class="nn">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># ---- Load data -----
</span><span class="n">data</span> <span class="o">=</span> <span class="n">load_breast_cancer</span><span class="p">()</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">data</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">target</span>
<span class="n">n</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span>

<span class="c1"># ---- AdaBoost ----
</span>
<span class="n">NUM_ITER</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">weights</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="c1"># initial weights are uniform across samples
</span>
<span class="k">for</span> <span class="n">ii</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">NUM_ITER</span><span class="p">):</span>
    
    <span class="c1"># Fit LR with current weights
</span>    <span class="n">clf</span> <span class="o">=</span> <span class="n">DecisionTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sample_weight</span><span class="o">=</span><span class="n">weights</span><span class="p">)</span>
    <span class="n">pred</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="p">(</span><span class="n">pred</span> <span class="o">!=</span> <span class="n">y</span><span class="p">))</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">weights</span><span class="p">)</span>

    <span class="c1"># Compute log odds of model error (measure of current model performance)
</span>    <span class="n">alph</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">err</span><span class="p">)</span> <span class="o">/</span> <span class="n">err</span><span class="p">)</span>

    <span class="c1"># Update weights
</span>    <span class="n">weights</span> <span class="o">=</span> <span class="n">weights</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">alph</span> <span class="o">*</span> <span class="p">(</span><span class="n">pred</span> <span class="o">!=</span> <span class="n">y</span><span class="p">))</span>

<span class="c1"># Final classifier
</span><span class="n">preds</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">preds</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">final_preds</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">sign</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">preds</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">alphas</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Final accuracy: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">final_preds</span> <span class="o">==</span> <span class="n">y</span><span class="p">)))</span>
</code></pre></div></div>

<h2 id="references">References</h2>

<ul>
  <li>Hazan, Elad. “Introduction to online convex optimization.” arXiv preprint arXiv:1909.05207 (2019).</li>
  <li>Schapire, Robert E. “The strength of weak learnability.” Machine learning 5.2 (1990): 197-227.</li>
  <li>Kearns, Michael, and Leslie Valiant. “Cryptographic limitations on learning Boolean formulae and finite automata.” Journal of the ACM (JACM) 41.1 (1994): 67-95.</li>
  <li>Kearns, Michael. “Thoughts on hypothesis boosting.” Unpublished manuscript 45 (1988): 105.</li>
</ul>

:ET